{"version":3,"sources":["../src/helper-functions.js"],"names":["pseudoCssToJSON","strLess","openCount","closeCount","replace","match","ruleName","styleName","styleValue","JSON","stringify","trim","parse","e","Error","toCSV","rows","opt_options","Object","headers","concat","nullString","hasOwnProperty","map","row","cell","toString","prototype","call","test","join","tableToArray","tbl","opt_cellValueGetter","td","textContent","innerText","twoD","rowCount","length","rowIndex","push","tr","colIndex","colCount","cells","offset","text","i","colSpan","parseInt","j","rowSpan","module","exports"],"mappings":"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","sourcesContent":["/**\n * Takes a nested CSS stylesheet string and converts it to JSON to be used by\n * YourJS.css() to make a stylesheet.\n * @param {string} strLess \n *   The nested CSS stylesheet string that should be converted to JSON that\n *   can be used by YourJS.css().\n * @returns {string}\n *   The JSON equivalent of the nested CSS stylesheet string that was passed\n *   in.\n */\nfunction pseudoCssToJSON(strLess) {\n  var openCount = 0;\n  var closeCount = 0;\n\n  strLess = strLess\n    .replace(/\\/\\*[^]*?\\*\\//g, '')\n    .replace(\n      /([^\\{\\};]+)\\{|([^:\\{\\}]+):([^;]+);|\\}/g,\n      function (match, ruleName, styleName, styleValue) {\n        if (ruleName) {\n          openCount++;\n          return JSON.stringify(ruleName.trim()) + \":{\";\n        }\n        if (styleName) {\n          return JSON.stringify(styleName.trim()) + \":\" + JSON.stringify(styleValue.trim()) + \",\";\n        }\n        closeCount++;\n        return \"},\";\n      }\n    )\n    .replace(/,\\s*(\\}|$)/g, '$1');\n\n  try {\n    return JSON.stringify(JSON.parse(\"{\" + strLess + \"}\"), null, 2);\n  }\n  catch (e) {\n    throw new Error(\n      openCount !== closeCount\n        ? \"Pseudo-CSS contains too many \" + (openCount > closeCount ? \"open\" : \"clos\") + \"ing braces.\"\n        : \"Pseudo-CSS couldn't be parsed correctly.\"\n    );\n  }\n}\n\n/**\n * Converts an array of arrays of values to a CSV string.\n * @param rows {Array<Array>}\n *     An array of arrays of values that should be converted to a CSV string.\n * @param opt_options {Object=}\n *     Optional.  If this contains a `nullString` property the value will be used\n *     as the string that will appear whenever `null` or `undefined` is found.\n *     If this contains a `headers` property the value should be an array\n *     indicating the headers to be included as the first row.\n * @returns {string}\n *     The CSV version of `rows` with any specified options.\n */\nfunction toCSV(rows, opt_options) {\n  opt_options = Object(opt_options);\n  if (opt_options.headers) {\n    rows = [opt_options.headers].concat(rows);\n  }\n  var nullString = opt_options.hasOwnProperty('nullString') ? opt_options.nullString : '(NULL)';\n  return rows\n    .map(function (row) {\n      return row.map(function (cell) {\n        cell = cell != null\n          ? 'function' === typeof cell.toString\n            ? cell + \"\"\n            : Object.prototype.toString.call(cell)\n          : nullString;\n        return /[\",\\n\\r]/.test(cell) ? '\"' + (cell).replace(/\"/g, '\"\"') + '\"' : cell;\n      }).join(',');\n    })\n    .join('\\n');\n}\n\n// https://gist.github.com/westc/0fa021ae5e66004c60e07c967e0b747f\nfunction tableToArray(tbl, opt_cellValueGetter) {\n  opt_cellValueGetter = opt_cellValueGetter || function (td) { return td.textContent || td.innerText; };\n  var twoD = [];\n  for (var rowCount = tbl.rows.length, rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n    twoD.push([]);\n  }\n  for (var rowIndex = 0, tr; rowIndex < rowCount; rowIndex++) {\n    var tr = tbl.rows[rowIndex];\n    for (var colIndex = 0, colCount = tr.cells.length, offset = 0; colIndex < colCount; colIndex++) {\n      var td = tr.cells[colIndex], text = opt_cellValueGetter(td, colIndex, rowIndex, tbl);\n      while (twoD[rowIndex].hasOwnProperty(colIndex + offset)) {\n        offset++;\n      }\n      for (var i = 0, colSpan = parseInt(td.colSpan, 10) || 1; i < colSpan; i++) {\n        for (var j = 0, rowSpan = parseInt(td.rowSpan, 10) || 1; j < rowSpan; j++) {\n          twoD[rowIndex + j][colIndex + offset + i] = text;\n        }\n      }\n    }\n  }\n  return twoD;\n}\n\nmodule.exports = { pseudoCssToJSON, toCSV, tableToArray };"],"file":"helper-functions.js"}