{"version":3,"sources":["../src/helper-functions.js"],"names":["pseudoCssToJSON","strLess","openCount","closeCount","replace","match","ruleName","styleName","styleValue","JSON","stringify","trim","parse","e","Error","module","exports"],"mappings":";;AAAA;;;;;;;;;;AAUA,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;AAEAF,EAAAA,OAAO,GAAGA,OAAO,CACdG,OADO,CACC,gBADD,EACmB,EADnB,EAEPA,OAFO,CAGN,wCAHM,EAIN,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,UAAtC,EAAkD;AAChD,QAAIF,QAAJ,EAAc;AACZJ,MAAAA,SAAS;AACT,aAAOO,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,EAAf,IAAkC,IAAzC;AACD;;AACD,QAAIJ,SAAJ,EAAe;AACb,aAAOE,IAAI,CAACC,SAAL,CAAeH,SAAS,CAACI,IAAV,EAAf,IAAmC,GAAnC,GAAyCF,IAAI,CAACC,SAAL,CAAeF,UAAU,CAACG,IAAX,EAAf,CAAzC,GAA6E,GAApF;AACD;;AACDR,IAAAA,UAAU;AACV,WAAO,IAAP;AACD,GAdK,EAgBPC,OAhBO,CAgBC,aAhBD,EAgBgB,IAhBhB,CAAV;;AAkBA,MAAI;AACF,WAAOK,IAAI,CAACC,SAAL,CAAeD,IAAI,CAACG,KAAL,CAAW,MAAMX,OAAN,GAAgB,GAA3B,CAAf,EAAgD,IAAhD,EAAsD,CAAtD,CAAP;AACD,GAFD,CAGA,OAAOY,CAAP,EAAU;AACR,UAAM,IAAIC,KAAJ,CACJZ,SAAS,KAAKC,UAAd,GACI,mCAAmCD,SAAS,GAAGC,UAAZ,GAAyB,MAAzB,GAAkC,MAArE,IAA+E,aADnF,GAEI,0CAHA,CAAN;AAKD;AACF;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AAAEhB,EAAAA,eAAe,EAAfA;AAAF,CAAjB","sourcesContent":["/**\n * Takes a nested CSS stylesheet string and converts it to JSON to be used by\n * YourJS.css() to make a stylesheet.\n * @param {string} strLess \n *   The nested CSS stylesheet string that should be converted to JSON that\n *   can be used by YourJS.css().\n * @returns {string}\n *   The JSON equivalent of the nested CSS stylesheet string that was passed\n *   in.\n */\nfunction pseudoCssToJSON(strLess) {\n  var openCount = 0;\n  var closeCount = 0;\n\n  strLess = strLess\n    .replace(/\\/\\*[^]*?\\*\\//g, '')\n    .replace(\n      /([^\\{\\};]+)\\{|([^:\\{\\}]+):([^;]+);|\\}/g,\n      function (match, ruleName, styleName, styleValue) {\n        if (ruleName) {\n          openCount++;\n          return JSON.stringify(ruleName.trim()) + \":{\";\n        }\n        if (styleName) {\n          return JSON.stringify(styleName.trim()) + \":\" + JSON.stringify(styleValue.trim()) + \",\";\n        }\n        closeCount++;\n        return \"},\";\n      }\n    )\n    .replace(/,\\s*(\\}|$)/g, '$1');\n\n  try {\n    return JSON.stringify(JSON.parse(\"{\" + strLess + \"}\"), null, 2);\n  }\n  catch (e) {\n    throw new Error(\n      openCount !== closeCount\n        ? \"Pseudo-CSS contains too many \" + (openCount > closeCount ? \"open\" : \"clos\") + \"ing braces.\"\n        : \"Pseudo-CSS couldn't be parsed correctly.\"\n    );\n  }\n}\n\nmodule.exports = { pseudoCssToJSON };"],"file":"helper-functions.js"}