{"version":3,"sources":["../src/ctrl.js"],"names":["DEFAULT_PANEL_SETTINGS","html","css","VueHtmlPanelCtrl","$scope","$injector","$rootScope","_","defaultsDeep","panel","events","on","onInitEditMode","bind","onDataReceived","onViewModeChanged","path","addEditorTab","logVueScope","isEditing","console","debug","getVueScope","jElem","panelElement","vueScope","elem","stylesheet","styleParent","parentNode","removeChild","className","replace","trim","JS","JSON","parse","err","info","error","cloneDeep","dataset","dataList","length","map","data","colNames","columns","c","text","columnNames","rows","row","reduceRight","carry","cell","cellIndex","raw","EXTRA_COLS","concat","range","y","x","Math","random","isReal","type","updateView","scope","attrs","ctrl","element","find","MetricsPanelCtrl","templateUrl"],"mappings":"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","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport * as JS from './external/YourJS.min';\nimport { vueToHTML, pseudoCssToJSON } from './helper-functions';\n\nconst DEFAULT_PANEL_SETTINGS = {\n  html: '',\n  css: '& {\\n  overflow: auto;\\n}'\n};\n\nexport class VueHtmlPanelCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n\n    this.$rootScope = $rootScope;\n\n    _.defaultsDeep(this.panel, DEFAULT_PANEL_SETTINGS);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('view-mode-changed', this.onViewModeChanged.bind(this));\n    \n    // Additional events that we can hook into...\n    // this.events.on('render', this.onRender.bind(this));\n    // this.events.on('data-error', this.onDataError.bind(this));\n    // this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n    // this.events.on('panel-size-changed', this.onPanelSizeChanged.bind(this));\n  }\n\n  /**\n   * Executed before showing edit mode.\n   */\n  onInitEditMode() {\n    let path = 'public/plugins/westc-vuehtml-panel/partials/';\n    this.addEditorTab('Editor', `${path}editor.html`, 1);\n  }\n\n  /**\n   * Executed when the view mode of the panel changes between edit and view.\n   */\n  onViewModeChanged() {\n    this.logVueScope();\n  }\n\n  /**\n   * Adds the Vue scope to the console log if in editing mode.\n   */\n  logVueScope() {\n    // If in editing mode show the html scope.\n    if (this.panel.isEditing) {\n      console.debug('Data values available:', this.getVueScope());\n    }\n  }\n\n  /**\n   * Should only be called when the panel should re-rendered fresh.  Not defined\n   * as render because there is no need to re-render every time the window\n   * resizes or the panel resizes.\n   */\n  updateView() {\n    let jElem = this.panelElement;\n    let panel = this.panel;\n\n    // Data available to the HTML code.\n    let vueScope = this.getVueScope();\n\n    vueToHTML(\n      panel.html,\n      vueScope,\n      html => {\n        let elem = jElem[0];\n\n        // Adds the HTML that the user entered onto the panel after interpreting\n        // any Vue.js syntax.\n        jElem.html(html);\n\n        // Remove the old stylesheet from the document if it exists.\n        let stylesheet = this.stylesheet;\n        let styleParent = stylesheet && stylesheet.parentNode;\n        if (styleParent) {\n          styleParent.removeChild(stylesheet);\n        }\n\n        // Remove the old class names added by YourJS.css().\n        elem.className = elem.className.replace(/(^|\\s+)_\\d+(?=\\s+|$)/g, ' ').trim();\n\n        // Add the nested CSS to the panel.\n        this.stylesheet = JS.css(JSON.parse(pseudoCssToJSON(panel.css)), elem);\n      },\n      // If an error occurs then it should be logged as such.\n      (err, info) => {\n        console.error('VueHtmlPanelCtrl error:', { err, info });\n      }\n    );\n}\n\n  /**\n   * Gets the object containing the variables available to the Vue HTML.\n   * @returns {Object}\n   *   The Vue scope that is made available to the Vue HTML.\n   */\n  getVueScope() {\n    return _.cloneDeep({\n      dataset: this.dataList,\n      panel: this.panel\n    });\n  }\n\n  /**\n   * Executed whenever data is received from the database for this panel.\n   * @param {Array} dataList \n   *   An array of objects containing the data that is collected from the\n   *   database.\n   */\n  onDataReceived(dataList) {\n    if (dataList && dataList.length) {\n      this.dataList = dataList.map(data => {\n        let colNames = data.columns.map(c => 'string' === typeof c ? c : c.text);\n        return {\n          columnNames: colNames,\n          rows: data.rows.map(row => {\n            return row.reduceRight((carry, cell, cellIndex) => {\n              carry[colNames[cellIndex]] = cell;\n              return carry;\n            }, {});\n          }),\n          raw: data\n        };\n      });\n    }\n    else {\n      let EXTRA_COLS = 2;\n      this.dataList = [\n        {\n          columns: [{ text: \"X\" }, { text: \"X * X\" }, { text: \"X + X\" }].concat(_.range(EXTRA_COLS).map(y => ({ text: `${y} / Math.random()` }))),\n          rows: _.range(150).map(x => [x, x * x, x + x].concat(_.range(EXTRA_COLS).map(y => y / Math.random()))),\n          isReal: false,\n          type: 'table'\n        }\n      ];\n    }\n\n    this.updateView();\n    this.logVueScope();\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.element = elem;\n    this.panelElement = elem.find('.panel-content');\n  }\n}\n\nVueHtmlPanelCtrl.templateUrl = 'partials/module.html';\n"],"file":"ctrl.js"}