{"version":3,"sources":["../src/ctrl.js"],"names":["DEFAULT_PANEL_SETTINGS","html","css","PANEL_PROP_KEYS","VueHtmlPanelCtrl","$scope","$injector","$rootScope","_","defaultsDeep","panel","events","on","onInitEditMode","bind","onDataReceived","onViewModeChanged","path","addEditorTab","logVueScope","isEditing","console","debug","getVueScope","ctrl","jElemPC","panelElement","elemPC","elem","JS","dom","cls","Math","random","replace","Date","append","className","trim","vueScope","vue","$destroy","Vue","template","el","data","mounted","stylesheet","styleParent","parentNode","removeChild","JSON","parse","methods","onError","err","info","error","cloneDeep","dataset","dataList","pick","length","map","colNames","columns","c","text","columnNames","rows","row","reduceRight","carry","cell","cellIndex","raw","EXTRA_COLS","concat","range","y","x","isReal","type","updateView","scope","attrs","element","find","MetricsPanelCtrl","config","errorHandler","vm","templateUrl"],"mappings":"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","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport * as JS from './external/YourJS.min';\nimport { pseudoCssToJSON } from './helper-functions';\nimport * as Vue from './external/vue.min';\n\nconst DEFAULT_PANEL_SETTINGS = {\n  html: '',\n  css: '& {\\n  overflow: auto;\\n}'\n};\n\nconst PANEL_PROP_KEYS = [\n  'fullscreen',\n  'datasource',\n  'description',\n  'targets',\n  'timeFrom',\n  'timeShift',\n  'title',\n  'transparent'\n];\n\nexport class VueHtmlPanelCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n\n    this.$rootScope = $rootScope;\n\n    _.defaultsDeep(this.panel, DEFAULT_PANEL_SETTINGS);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('view-mode-changed', this.onViewModeChanged.bind(this));\n    \n    // Additional events that we can hook into...\n    // this.events.on('render', this.onRender.bind(this));\n    // this.events.on('refresh', this.onRefresh.bind(this));\n    // this.events.on('data-error', this.onDataError.bind(this));\n    // this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n    // this.events.on('panel-size-changed', this.onPanelSizeChanged.bind(this));\n  }\n\n  /**\n   * Executed before showing edit mode.\n   */\n  onInitEditMode() {\n    let path = 'public/plugins/westc-vuehtml-panel/partials/';\n    this.addEditorTab('Editor', `${path}editor.html`, 1);\n  }\n\n  /**\n   * Executed when the view mode of the panel changes between edit and view.\n   */\n  onViewModeChanged() {\n    this.logVueScope();\n  }\n\n  /**\n   * Adds the Vue scope to the console log if in editing mode.\n   */\n  logVueScope() {\n    // If in editing mode show the html scope.\n    if (this.panel.isEditing) {\n      console.debug('Data values available:', this.getVueScope());\n    }\n  }\n\n  /**\n   * Should only be called when the panel should re-rendered fresh.  Not defined\n   * as render because there is no need to re-render every time the window\n   * resizes or the panel resizes.\n   */\n  updateView() {\n    let ctrl = this;\n    let jElemPC = ctrl.panelElement;\n    let elemPC = jElemPC[0];\n    let elem = JS.dom({ _: 'div' });\n    let panel = ctrl.panel;\n    let cls = ('_' + Math.random()).replace(/0\\./, +new Date);\n\n    jElemPC.html('').append(elem);\n\n    elemPC.className = elemPC.className.replace(/(^|\\s+)_\\d+(?=\\s+|$)/g, ' ').trim() + ' ' + cls;\n\n    // Data available to the HTML code.\n    let vueScope = ctrl.getVueScope();\n\n    if (ctrl.vue) {\n      ctrl.vue.$destroy();\n    }\n\n    ctrl.vue = new Vue({\n      template: `<div>${panel.html}</div>`,\n      el: elem,\n      data: vueScope,\n      mounted() {\n        // Remove the old stylesheet from the document if it exists.\n        let stylesheet = ctrl.stylesheet;\n        let styleParent = stylesheet && stylesheet.parentNode;\n        if (styleParent) {\n          styleParent.removeChild(stylesheet);\n        }\n\n        // Add the nested CSS to the panel.\n        ctrl.stylesheet = JS.css(JSON.parse(pseudoCssToJSON(panel.css)), '.' + cls);\n      },\n      methods: {\n        onError(err, info) {\n          console.error('VueHtmlPanelCtrl error:', { err, info });\n        }\n      }\n    });\n  }\n\n  /**\n   * Gets the object containing the variables available to the Vue HTML.\n   * @returns {Object}\n   *   The Vue scope that is made available to the Vue HTML.\n   */\n  getVueScope() {\n    return _.cloneDeep({\n      dataset: this.dataList,\n      panel: _.pick(this.panel, PANEL_PROP_KEYS)\n    });\n  }\n\n  /**\n   * Executed whenever data is received from the database for this panel.\n   * @param {Array} dataList \n   *   An array of objects containing the data that is collected from the\n   *   database.\n   */\n  onDataReceived(dataList) {\n    if (dataList && dataList.length) {\n      this.dataList = dataList.map(data => {\n        let colNames = data.columns.map(c => 'string' === typeof c ? c : c.text);\n        return {\n          columnNames: colNames,\n          rows: data.rows.map(row => {\n            return row.reduceRight((carry, cell, cellIndex) => {\n              carry[colNames[cellIndex]] = cell;\n              return carry;\n            }, {});\n          }),\n          raw: data\n        };\n      });\n    }\n    else {\n      let EXTRA_COLS = 2;\n      this.dataList = [\n        {\n          columns: [{ text: \"X\" }, { text: \"X * X\" }, { text: \"X + X\" }].concat(_.range(EXTRA_COLS).map(y => ({ text: `${y} / Math.random()` }))),\n          rows: _.range(150).map(x => [x, x * x, x + x].concat(_.range(EXTRA_COLS).map(y => y / Math.random()))),\n          isReal: false,\n          type: 'table'\n        }\n      ];\n    }\n\n    this.updateView();\n    this.logVueScope();\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.element = elem;\n    this.panelElement = elem.find('.panel-content');\n  }\n}\n\n// Allows for error handling in vueToHTML().\nVue.config.errorHandler = (err, vm, info) => {\n  if (vm && vm.onError) {\n    vm.onError(err, info);\n  }\n};\n\nVueHtmlPanelCtrl.templateUrl = 'partials/module.html';\n"],"file":"ctrl.js"}